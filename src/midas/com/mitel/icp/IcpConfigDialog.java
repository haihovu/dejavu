/*
 * IcpConfigDialog.java
 *
 * Created on April 28, 2004, 10:15 PM
 */

package com.mitel.icp;
import com.mitel.guiutil.MiGuiUtil;
import com.mitel.guiutil.MiLookAndFeel;
import com.mitel.miutil.MiExceptionUtil;
import com.mitel.miutil.MiLogMsg.Category;
import com.mitel.miutil.MiSystem;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.*;

/**
 *
 * @author  Hai Vu
 */
public class IcpConfigDialog extends JDialog
{
	private static final long serialVersionUID = 1L;
	private final IcpConfigListener listener;

	/** 
	 * Creates a new instance of IcpConfigDialog, not visible.
	 * MUST be invoked from the EDT.
	 * @param parent The parent frame of this dialog.
	 * @param desc The ICP descriptor used to initialize this dialog. Reference to this is not retained here.
	 * @param listener Used for report status.
	 * @throws IcpConfigDialog.IcpConfigException
	 */
	public IcpConfigDialog(Frame parent, IcpDescriptor desc, IcpConfigListener listener) throws IcpConfigDialog.IcpConfigException
	{
		super(parent, true);

		if(!SwingUtilities.isEventDispatchThread())
			throw new RuntimeException("Not invoked from EDT");

		if( desc == null )
		{
			throw new IcpConfigDialog.IcpConfigException( "NULL ICP Descriptor given" );
		}

		this.listener = listener;
		locaIcpRecord = new IcpDescriptor(desc);
		
		initComponents();
		initGui();
	}

	/**
	 * Creates a new instance of IcpConfigDialog, not visible.
	 * MUST be invoked from the EDT.
	 * @param parent The parent dialog of this dialog.
	 * @param desc The ICP descriptor used to initialize this dialog. Reference to this is not retained here.
	 * @param listener Used for report status.
	 * @throws IcpConfigDialog.IcpConfigException
	 */
	public IcpConfigDialog(Dialog parent, IcpDescriptor desc, IcpConfigListener listener) throws IcpConfigDialog.IcpConfigException
	{
		super(parent, true);

		if(!SwingUtilities.isEventDispatchThread())
			throw new RuntimeException("Not invoked from EDT");

		if( desc == null )
		{
			throw new IcpConfigDialog.IcpConfigException( "NULL ICP Descriptor given" );
		}

		this.listener = listener;
		locaIcpRecord = new IcpDescriptor(desc);
		
		initComponents();
		initGui();
	}

	private void initGui()
	{
		Object[] icpTypes = IcpTypeRepository.getInstance().getRegisteredTypes();
		for(int i = 0; i < icpTypes.length; ++i)
		{
			icpConfigHostType.addItem(icpTypes[i]);
		}

		setupAllFields();
		
		MiGuiUtil.registerKeyAction(getRootPane(), KeyEvent.VK_ESCAPE, new AbstractAction()
		{
			private static final long serialVersionUID = 1L;
			@Override
			public void actionPerformed(ActionEvent e)
			{
				if(listener != null)
				{
					listener.onCancel(IcpConfigDialog.this);
				}
			}
		});
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        final javax.swing.JLabel m_icpNameLabel = new javax.swing.JLabel();
        icpConfigIcpName = new javax.swing.JTextField();
        final javax.swing.JLabel m_icpTypeLabel = new javax.swing.JLabel();
        icpConfigHostType = new javax.swing.JComboBox();
        final javax.swing.JLabel m_hostAddressLabel = new javax.swing.JLabel();
        icpConfigHostAddress = new javax.swing.JTextField();
        final javax.swing.JLabel m_e2tAddressLabel = new javax.swing.JLabel();
        icpConfigE2tAddress = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        userId = new javax.swing.JTextField();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        userPassword = new javax.swing.JPasswordField();
        jSeparator2 = new javax.swing.JSeparator();
        final javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        icpConfigRegCodde = new javax.swing.JTextField();
        final javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        minetVersion = new javax.swing.JTextField();
        javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        icpConfigOk = new javax.swing.JButton();
        icpConfigCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/mitel/icp/IcpManagement"); // NOI18N
        setTitle(bundle.getString("icpConfigurationTitle")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(new java.awt.BorderLayout(4, 4));

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        m_icpNameLabel.setText(bundle.getString("nameLabel")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(m_icpNameLabel, gridBagConstraints);

        icpConfigIcpName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icpConfigIcpNameActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(icpConfigIcpName, gridBagConstraints);

        m_icpTypeLabel.setText(bundle.getString("icpTypeLabel")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(m_icpTypeLabel, gridBagConstraints);

        icpConfigHostType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icpConfigHostTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(icpConfigHostType, gridBagConstraints);

        m_hostAddressLabel.setText(bundle.getString("hostAddressLabel")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(m_hostAddressLabel, gridBagConstraints);

        icpConfigHostAddress.setText("N/A");
        icpConfigHostAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icpConfigHostAddressActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(icpConfigHostAddress, gridBagConstraints);

        m_e2tAddressLabel.setText(bundle.getString("e2tAddressLabel")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(m_e2tAddressLabel, gridBagConstraints);

        icpConfigE2tAddress.setText("N/A");
        icpConfigE2tAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icpConfigE2tAddressActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(icpConfigE2tAddress, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jSeparator1, gridBagConstraints);

        jLabel3.setText(bundle.getString("userLabel")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(jLabel3, gridBagConstraints);

        userId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userIdActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(userId, gridBagConstraints);

        jLabel4.setText(bundle.getString("passwordLabel")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(jLabel4, gridBagConstraints);

        userPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userPasswordActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(userPassword, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jSeparator2, gridBagConstraints);

        jLabel1.setText(bundle.getString("registrationCodeLabel")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(jLabel1, gridBagConstraints);

        icpConfigRegCodde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icpConfigRegCoddeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(icpConfigRegCodde, gridBagConstraints);

        jLabel2.setText(bundle.getString("minetVersionLabel")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(jLabel2, gridBagConstraints);

        minetVersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minetVersionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        jPanel1.add(minetVersion, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8));

        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("com/mitel/guiutil/GeneralGui"); // NOI18N
        icpConfigOk.setText(bundle1.getString("okLabel")); // NOI18N
        icpConfigOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icpConfigOkActionPerformed(evt);
            }
        });
        jPanel2.add(icpConfigOk);

        icpConfigCancel.setText(bundle1.getString("cancelLabel")); // NOI18N
        icpConfigCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                icpConfigCancelActionPerformed(evt);
            }
        });
        jPanel2.add(icpConfigCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void icpConfigRegCoddeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_icpConfigRegCoddeActionPerformed
	{//GEN-HEADEREND:event_icpConfigRegCoddeActionPerformed
		commitDialog();
	}//GEN-LAST:event_icpConfigRegCoddeActionPerformed

	private void icpConfigE2tAddressActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_icpConfigE2tAddressActionPerformed
	{//GEN-HEADEREND:event_icpConfigE2tAddressActionPerformed
		commitDialog();
	}//GEN-LAST:event_icpConfigE2tAddressActionPerformed

	private void icpConfigHostAddressActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_icpConfigHostAddressActionPerformed
	{//GEN-HEADEREND:event_icpConfigHostAddressActionPerformed
		commitDialog();
	}//GEN-LAST:event_icpConfigHostAddressActionPerformed

	private void formWindowActivated(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowActivated
	{//GEN-HEADEREND:event_formWindowActivated
		icpConfigIcpName.requestFocusInWindow();
	}//GEN-LAST:event_formWindowActivated

	private void icpConfigIcpNameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_icpConfigIcpNameActionPerformed
	{//GEN-HEADEREND:event_icpConfigIcpNameActionPerformed
		commitDialog();
	}//GEN-LAST:event_icpConfigIcpNameActionPerformed

	private void icpConfigCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_icpConfigCancelActionPerformed
	{//GEN-HEADEREND:event_icpConfigCancelActionPerformed
		if( null != listener )
		{
			listener.onCancel(this);
		}
	}//GEN-LAST:event_icpConfigCancelActionPerformed

	private void icpConfigOkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_icpConfigOkActionPerformed
	{//GEN-HEADEREND:event_icpConfigOkActionPerformed
		commitDialog();
	}//GEN-LAST:event_icpConfigOkActionPerformed

	private void minetVersionActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_minetVersionActionPerformed
	{//GEN-HEADEREND:event_minetVersionActionPerformed
		commitDialog();
	}//GEN-LAST:event_minetVersionActionPerformed

	private void icpConfigHostTypeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_icpConfigHostTypeActionPerformed
	{//GEN-HEADEREND:event_icpConfigHostTypeActionPerformed
		updateDueToIcpTypeChange();
	}//GEN-LAST:event_icpConfigHostTypeActionPerformed

	private void userPasswordActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_userPasswordActionPerformed
	{//GEN-HEADEREND:event_userPasswordActionPerformed
		commitDialog();
	}//GEN-LAST:event_userPasswordActionPerformed

	private void userIdActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_userIdActionPerformed
	{//GEN-HEADEREND:event_userIdActionPerformed
		commitDialog();
	}//GEN-LAST:event_userIdActionPerformed

	/**
	 * Commits the dialog.
	 */
	private void commitDialog()
	{
		if(null != listener)
		{
			updateLocalIcpDesc();
			listener.onAccept(this.locaIcpRecord, this);
		}
	}
	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		MiLookAndFeel.setCurrentLookAndFeel(MiLookAndFeel.LAF_SUBSTANCE_CREME_COFFEE);
		SwingUtilities.invokeLater(new Runnable()
		{
			@Override
			public void run()
			{
				try
				{
					IcpService.getInstance();

					Frame testFrame = new JFrame();

					IcpDescriptor icpDescriptor = new IcpDescriptor("abc", "1.2.5",
						"***", "123.123.123.123", null, "SX200ICP", "userXyz", "tjhedrt6645puwy");

					new IcpConfigDialog(testFrame, icpDescriptor, new IcpConfigDialog.IcpConfigListener()
					{
						@Override
						public void onAccept(IcpDescriptor desc, JDialog thisDialog)
						{
							thisDialog.dispose();
						}
						
						@Override
						public void onCancel(JDialog thisDialog)
						{
							thisDialog.dispose();
						}
					}).setVisible(true);
					testFrame.dispose();
				}
				catch(IcpConfigException ex)
				{
					MiSystem.logWarning(Category.DESIGN, MiExceptionUtil.simpleTrace(ex));
				}
				catch(RuntimeException e )
				{
					MiSystem.logError(Category.DESIGN, MiExceptionUtil.simpleTrace(e));
				}
			}
		});
		
	}

	private void setupAllFields()
	{
		icpConfigIcpName.setText(locaIcpRecord.getName());

		userId.setText(locaIcpRecord.getUserId(IcpProcessor.ProcessorName.RTC));
		userPassword.setText(locaIcpRecord.getPassword(IcpProcessor.ProcessorName.RTC));
		
		// Setup RTC processor
		icpConfigHostAddress.setText(locaIcpRecord.getAddress(IcpProcessor.ProcessorName.RTC));
		icpConfigHostAddress.setEnabled(true);
			
		// Setup E2T processor
		if(locaIcpRecord.getTypeInfo().hasProcessor(IcpProcessor.ProcessorName.E2T))
		{
			icpConfigE2tAddress.setText(locaIcpRecord.getAddress(IcpProcessor.ProcessorName.E2T));
			icpConfigE2tAddress.setEnabled(true);
		}
		else
		{
			icpConfigE2tAddress.setEnabled(false);
		}

		// Setup host type selector
		icpConfigHostType.setSelectedIndex(0);
		for( int i = 0; i < icpConfigHostType.getItemCount(); ++i )
		{
			if( icpConfigHostType.getItemAt(i).equals(locaIcpRecord.getType()))
			{
				icpConfigHostType.setSelectedIndex(i);
				break;
			}
		}

		// Setup Registration code
		icpConfigRegCodde.setText(locaIcpRecord.getRegistrationCode());

		// Setup MiNET version
		minetVersion.setText(locaIcpRecord.getMiNetVersion());

		pack();
	}

	private void updateDueToIcpTypeChange()
	{
		try
		{
			IcpType icpType = null;
			Object selectedHostType = icpConfigHostType.getSelectedItem();
			if(selectedHostType instanceof String) {
				icpType = IcpTypeRepository.getInstance().locateIcpType((String)selectedHostType);
			}
			if((icpType != null)&&(icpType.getTypeInfo().hasProcessor(IcpProcessor.ProcessorName.RTC)))
			{
				icpConfigHostAddress.setEnabled(true);
			}
			else
			{
				icpConfigHostAddress.setEnabled(false);
			}

			if((icpType != null)&&(icpType.getTypeInfo().hasProcessor(IcpProcessor.ProcessorName.E2T)))
			{
				icpConfigE2tAddress.setEnabled(true);
			}
			else
			{
				icpConfigE2tAddress.setEnabled(false);
			}
		}
		catch(RuntimeException e)
		{
			MiSystem.logError(Category.DESIGN, MiExceptionUtil.simpleTrace(e));
		}
	}

	private void updateLocalIcpDesc()
	{
		locaIcpRecord.setName(icpConfigIcpName.getText());
		locaIcpRecord.setRegistrationCode(icpConfigRegCodde.getText());
		locaIcpRecord.setMiNetVersion(minetVersion.getText());
		locaIcpRecord.setUserId(IcpProcessor.ProcessorName.RTC, userId.getText());
		String newPassword = new String(userPassword.getPassword());
		if(!newPassword.equals(locaIcpRecord.getPassword(IcpProcessor.ProcessorName.RTC)))
		{
			locaIcpRecord.setPassword(IcpProcessor.ProcessorName.RTC, newPassword);
		}
		try
		{
			locaIcpRecord.setType((String)icpConfigHostType.getSelectedItem());
			IcpProcessor rtc = locaIcpRecord.locateProcessor(IcpProcessor.ProcessorName.RTC);
			if(null != rtc)
			{
				synchronized(rtc)
				{
					locaIcpRecord.setAddress(rtc.getName(), icpConfigHostAddress.getText());
				}
			}
			IcpProcessor e2t = locaIcpRecord.locateProcessor(IcpProcessor.ProcessorName.E2T);
			if(null != e2t)
			{
				synchronized(e2t)
				{
					locaIcpRecord.setAddress(IcpProcessor.ProcessorName.E2T, icpConfigE2tAddress.getText());
				}
			}
		}
		catch(RuntimeException e)
		{
			MiSystem.logError(Category.DESIGN, MiExceptionUtil.simpleTrace(e));
		}
	}

	/**
	 * Listener interface for handling user inputs from ICP configuration dialog.
	 */
	public abstract interface IcpConfigListener
	{
		/**
		 * The user committed the input from the ICP configuration dialog.
		 * @param desc The user defined data
		 * @param thisDialog The dialog from which the user input the data.
		 * The implementation should dispose of this dialog if no longer needed.
		 */
		public abstract void onAccept(IcpDescriptor desc, JDialog thisDialog);

		/**
		 * The user canceled the ICP configuration dialog.
		 * @param thisDialog The dialog from which the user canceled the input.
		 * The implementation should dispose of this dialog if no longer needed.
		 */
		public abstract void onCancel(JDialog thisDialog);
	}

	public static class IcpConfigException extends Exception
	{
		private static final long serialVersionUID = 1L;
		public IcpConfigException(java.lang.String description)
		{
			super( description );
		}

	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton icpConfigCancel;
    private javax.swing.JTextField icpConfigE2tAddress;
    private javax.swing.JTextField icpConfigHostAddress;
    private javax.swing.JComboBox icpConfigHostType;
    private javax.swing.JTextField icpConfigIcpName;
    private javax.swing.JButton icpConfigOk;
    private javax.swing.JTextField icpConfigRegCodde;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField minetVersion;
    private javax.swing.JTextField userId;
    private javax.swing.JPasswordField userPassword;
    // End of variables declaration//GEN-END:variables

	private final IcpDescriptor locaIcpRecord;
}
