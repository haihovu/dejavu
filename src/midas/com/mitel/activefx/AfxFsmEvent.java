/* Generated by Together */

package com.mitel.activefx;

import com.mitel.mifsm.FsmContext;
import com.mitel.mifsm.FsmEvent;
import java.nio.ByteBuffer;
import java.nio.channels.SelectableChannel;

/**
 * Represents FSM events for use in the Active FX framework.
 * Each AfxFsmEvent object can have a number of optional attributes:
 * <ul>
 * <li>Buffer</li>
 * <li>Cause</li>
 * <li>Channel</li>
 * <li>Event Handler</li>
 * <li>IP Address</li>
 * <li>IP Port</li>
 * </ul>
 */
class AfxFsmEvent implements FsmEvent
{
	/**
	 * Open channel request.
	 */
	static final int OPEN = 1;
	/**
	 * Close channel request.
	 */
	static final int CLOSE = 2;
	/**
	 * Initiate read request.
	 */
	final static int READ = 3;
	/**
	 * Initiate write request.
	 */
	final static int WRITE = 4;
	/**
	 * Read attempt failed
	 */
	final static int READ_FAILURE = 5;
	/**
	 * Write attempt failed
	 */
	final static int WRITE_FAILURE = 6;
	/**
	 * Open attempt failed
	 */
	final static int OPEN_FAILURE = 7;
	/**
	 * Read completed successfully
	 */
	final static int READ_COMPLETE = 8;
	/**
	 * Write completed successfully
	 */
	final static int WRITE_COMPLETE = 9;
	/**
	 * Open completed successfully
	 */
	final static int OPEN_COMPLETE = 10;
	/**
	 * Close completed successfully
	 */
	final static int CLOSE_COMPLETE = 11;
	/**
	 * Channel ready for reading
	 */
	final static int ON_READ = 12;
	/**
	 * Channel ready for writing
	 */
	final static int ON_WRITE = 13;
	/**
	 * Initiate hand shaking
	 */
	final static int HANDSHAKE = 14;
	/**
	 * Perform watchdog checks.
	 */
	final static int WATCHDOG_CHECK = 15;
	/**
	 * For Registering a ServerSocketAccept
	 */
	final static int CONNECT = 16;

	/**
	 * Creates a new AfxFsmEvent, for general usage.
	 * @param id The event ID
	 * @param context The FSM context to receive this event
	 */
	AfxFsmEvent(int id, FsmContext context)
	{
		m_Id = id;
		m_Context = context;
	}

	/**
	 * Creates a new AfxFsmEvent, for failure notification.
	 * @param id The event ID
	 * @param context The FSM context to receive this event
	 * @param cause The failure cause
	 */
	AfxFsmEvent(int id, FsmContext context, String cause)
	{
		m_Id = id;
		m_Cause = cause;
		m_Context = context;
	}

	/**
	 * Creates a new AfxFsmEvent, for use with open requests.
	 * @param id The event ID
	 * @param context The FSM context to receive this event
	 * @param ipAddr The IP address of the remote endpoint with which to initiate the connection.
	 * @param ipPort The IP port of the remote endpoint with which to inititate the connection
	 * @param handler The interface to the callback object for receiving connection events.
	 */
	AfxFsmEvent(int id, FsmContext context, String ipAddr, int ipPort, AfxEventHandler handler)
	{
		m_Id = id;
		m_Context = context;
		m_IpAddr = ipAddr;
		m_IpPort = ipPort;
		m_EventHandler = handler;
	}

	/**
	 * Creates a new AfxFsmEvent, for use with read/write requests.
	 * @param id The event ID
	 * @param context The FSM context to receive this event
	 * @param buffer The byte buffer to be used in the read/write requests.
	 * @param handler The interface to the callback object for receiving read/write events.
	 */
	AfxFsmEvent(int id, FsmContext context, ByteBuffer buffer, AfxEventHandler handler)
	{
		m_Id = id;
		m_Context = context;
		m_Buffer = buffer;
		m_EventHandler = handler;
	}

	/**
	 * Creates a new AfxFsmEvent, for use with open requests.
	 * @param id The event ID
	 * @param context The FSM context to receive this event
	 * @param channel An I/O channel to be used for establishing the connection.
	 * @param handler The interface to the callback object for receiving connection events.
	 */
	AfxFsmEvent(int id, FsmContext context, SelectableChannel channel, AfxEventHandler handler)
	{
		m_Id = id;
		m_Context = context;
		m_Channel = channel;
		m_EventHandler = handler;
	}
	
	public FsmContext getContext()
	{
		return m_Context;
	}

	public int getId()
	{
		return m_Id;
	}

	/**
	 * Retrieves the <I>Cause</I> attribute. 
	 * This attribute is set once in one of the constructors.
	 * @return The string representing the <I>Cause</I> attribute, null if not set.
	 */
	public String getCause()
	{
		return m_Cause;
	}
	
	/**
	 * Retrieves the <I>Buffer</I> attribute. 
	 * This attribute is set once in one of the constructors.
	 * @return The byte buffer representing the <I>Buffer</I> attribute, null if not set.
	 */
	public ByteBuffer getBuffer()
	{
		return m_Buffer;
	}

	/**
	 * Retrieves the <I>Channel</I> attribute. 
	 * This attribute is set once in one of the constructors.
	 * @return The I/O channel representing the <I>Channel</I> attribute, null if not set.
	 */
	public SelectableChannel getChannel()
	{
		return m_Channel;
	}

	/**
	 * Retrieves the <I>Event Handler</I> attribute. 
	 * This attribute is set once in one of the constructors.
	 * @return The object representing the <I>Event Handler</I> attribute, null if not set.
	 */
	public AfxEventHandler getEventHandler()
	{
		return m_EventHandler;
	}

	/**
	 * Retrieves the <I>IP Address</I> attribute. 
	 * This attribute is set once in one of the constructors.
	 * @return The string representing the <I>IP Address</I> attribute, null if not set.
	 */
	public String getIpAddr()
	{
		return m_IpAddr;
	}

	/**
	 * Retrieves the <I>IP Port</I> attribute. 
	 * This attribute is set once in one of the constructors.
	 * @return The integer representing the <I>IP Port</I> attribute, null if not set.
	 */
	public int getIpPort()
	{
		return m_IpPort;
	}

	@Override
	public String toString()
	{
		StringBuilder retValue = new StringBuilder(64);
		switch(getId())
		{
			case OPEN:
				retValue.append("OPEN");
				break;
			case CLOSE:
				retValue.append("CLOSE");
				break;
			case READ:
				retValue.append("READ");
				break;
			case WRITE:
				retValue.append("WRITE");
				break;
			case READ_FAILURE:
				retValue.append("READ_FAILURE");
				break;
			case WRITE_FAILURE:
				retValue.append("WRITE_FAILURE");
				break;
			case OPEN_FAILURE:
				retValue.append("OPEN_FAILURE");
				break;
			case READ_COMPLETE:
				retValue.append("READ_COMPLETE");
				break;
			case WRITE_COMPLETE:
				retValue.append("WRITE_COMPLETE");
				break;
			case OPEN_COMPLETE:
				retValue.append("OPEN_COMPLETE");
				break;
			case CLOSE_COMPLETE:
				retValue.append("CLOSE_COMPLETE");
				break;
			case HANDSHAKE:
				retValue.append("HANDSHAKE");
				break;
			case CONNECT:
				retValue.append("CONNECT");
				break;
			default:
				retValue.append("UNKNOWN");
		}

		return retValue.append(".").append(m_IpAddr).append(":").append(m_IpPort).toString();
	}

	/**
	 * @supplierCardinality 1 
	 */
	private FsmContext m_Context;
	private ByteBuffer m_Buffer = null;
	private int m_Id;
	private SelectableChannel m_Channel;
	private String m_Cause;

	/**
	 * @supplierCardinality 1 
	 */
	private AfxEventHandler m_EventHandler = null;
	private String m_IpAddr;
	private int m_IpPort;
}
