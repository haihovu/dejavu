/*
 * IcpDateTimeDialog.java
 *
 * Created on July 12, 2004, 3:01 PM
 */

package com.mitel.guiutil;

import java.awt.event.KeyEvent;
import java.util.*;
import java.util.Map.Entry;
import javax.swing.*;
import com.mitel.miutil.MiDateTime;
import com.mitel.miutil.MiExceptionUtil;
import com.mitel.miutil.MiLogMsg.Category;
import com.mitel.miutil.MiSystem;

/**
 *
 * @author  haiv
 */
public class MiDateTimeDialog extends JDialog
{
	private static final long serialVersionUID = 1L;
	
	/** Creates new form IcpDateTimeDialog
	 * @param parent
	 * @param title
	 * @param date
	 * @param listener
	 */
	public MiDateTimeDialog(java.awt.Frame parent, String title, MiDateTime date, MiDateTimeDialog.DateTimeListener listener)
	{
		super(parent, true);
		m_dateTime = new MiDateTime(date);
		m_listener = listener;
		this.setTitle(title);
		initComponents();
		updateGui();
		pack();
		
		int x = parent.getX() + parent.getWidth()/2 - this.getWidth()/2;
		int y = parent.getY() + parent.getHeight()/2 - this.getHeight()/2;
		
		if(x<0)
			x = 0;
		if(y < 0)
			y = 0;
		
		setLocation(x, y);
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        datePanel = new javax.swing.JPanel();
        m_yearField = new javax.swing.JTextField();
        m_monthField = new javax.swing.JComboBox();
        m_dayField = new javax.swing.JComboBox();
        timePanel = new javax.swing.JPanel();
        final javax.swing.JLabel fillerWest = new javax.swing.JLabel();
        m_hourField = new javax.swing.JTextField();
        final javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        m_minuteField = new javax.swing.JTextField();
        final javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        m_secondField = new javax.swing.JTextField();
        final javax.swing.JLabel fillerEast = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        m_okButton = new javax.swing.JButton();
        m_cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        datePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8));
        datePanel.setFocusable(false);
        datePanel.setRequestFocusEnabled(false);
        datePanel.setVerifyInputWhenFocusTarget(false);

        m_yearField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_yearFieldActionPerformed(evt);
            }
        });
        m_yearField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                m_yearFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                m_yearFieldFocusLost(evt);
            }
        });
        datePanel.add(m_yearField);

        initializeMonthField();
        m_monthField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_monthFieldActionPerformed(evt);
            }
        });
        datePanel.add(m_monthField);

        initializeDayField();
        m_dayField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_dayFieldActionPerformed(evt);
            }
        });
        datePanel.add(m_dayField);

        getContentPane().add(datePanel, java.awt.BorderLayout.NORTH);

        timePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8));
        timePanel.setFocusable(false);
        timePanel.setPreferredSize(new java.awt.Dimension(150, 36));
        timePanel.setRequestFocusEnabled(false);
        timePanel.setVerifyInputWhenFocusTarget(false);
        timePanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        timePanel.add(fillerWest, gridBagConstraints);

        m_hourField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        m_hourField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_hourFieldActionPerformed(evt);
            }
        });
        m_hourField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                m_hourFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                m_hourFieldFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        timePanel.add(m_hourField, gridBagConstraints);

        jLabel1.setText(":");
        jLabel1.setFocusable(false);
        jLabel1.setRequestFocusEnabled(false);
        jLabel1.setVerifyInputWhenFocusTarget(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        timePanel.add(jLabel1, gridBagConstraints);

        m_minuteField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        m_minuteField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_minuteFieldActionPerformed(evt);
            }
        });
        m_minuteField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                m_minuteFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                m_minuteFieldFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        timePanel.add(m_minuteField, gridBagConstraints);

        jLabel2.setText(":");
        jLabel2.setFocusable(false);
        jLabel2.setRequestFocusEnabled(false);
        jLabel2.setVerifyInputWhenFocusTarget(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        timePanel.add(jLabel2, gridBagConstraints);

        m_secondField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        m_secondField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_secondFieldActionPerformed(evt);
            }
        });
        m_secondField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                m_secondFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                m_secondFieldFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 2;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        timePanel.add(m_secondField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        timePanel.add(fillerEast, gridBagConstraints);

        getContentPane().add(timePanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8));

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/mitel/guiutil/GeneralGui"); // NOI18N
        m_okButton.setText(bundle.getString("okLabel")); // NOI18N
        m_okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_okButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(m_okButton);

        m_cancelButton.setText(bundle.getString("cancelLabel")); // NOI18N
        m_cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_cancelButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(m_cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void m_dayFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_dayFieldActionPerformed
	{//GEN-HEADEREND:event_m_dayFieldActionPerformed
		this.m_dateTime.m_day = m_dayField.getSelectedIndex();
	}//GEN-LAST:event_m_dayFieldActionPerformed

	private void m_monthFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_monthFieldActionPerformed
	{//GEN-HEADEREND:event_m_monthFieldActionPerformed
		try
		{
			this.m_dateTime.m_month = convertMonthString2Int((String)m_monthField.getSelectedItem());
		}
		catch(Exception e)
		{
			MiSystem.logError(Category.DESIGN, MiExceptionUtil.simpleTrace(e));
		}
	}//GEN-LAST:event_m_monthFieldActionPerformed

	private void m_secondFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_m_secondFieldFocusLost
	{//GEN-HEADEREND:event_m_secondFieldFocusLost
		if(m_secondField.getText().matches("[0-9]+"))
		{
			int sec = Integer.parseInt(m_secondField.getText());
			if((sec > -1)&&(sec < 61))
			{
				m_dateTime.m_second = sec;
				return;
			}
		}
		
		m_secondField.setText(String.valueOf(m_dateTime.m_second));
	}//GEN-LAST:event_m_secondFieldFocusLost

	private void m_minuteFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_m_minuteFieldFocusLost
	{//GEN-HEADEREND:event_m_minuteFieldFocusLost
		if(m_minuteField.getText().matches("[0-9]+"))
		{
			int min = Integer.parseInt(m_minuteField.getText());
			if((min > -1)&&(min < 61))
			{
				m_dateTime.m_minute = min;
				return;
			}
		}
		
		m_minuteField.setText(String.valueOf(m_dateTime.m_minute));
	}//GEN-LAST:event_m_minuteFieldFocusLost

	private void m_hourFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_m_hourFieldFocusLost
	{//GEN-HEADEREND:event_m_hourFieldFocusLost
		if(m_hourField.getText().matches("[0-9]+"))
		{
			int h = Integer.parseInt(m_hourField.getText());
			if((h > -1)&&(h < 61))
			{
				m_dateTime.m_hour = h;
				return;
			}
		}
		
		m_hourField.setText(String.valueOf(m_dateTime.m_hour));
	}//GEN-LAST:event_m_hourFieldFocusLost

	private void m_yearFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_m_yearFieldFocusLost
	{//GEN-HEADEREND:event_m_yearFieldFocusLost
		if(!m_yearField.getText().matches("[1-9][0-9]*"))
			m_yearField.setText(String.valueOf(m_dateTime.m_year));
		else
			m_dateTime.m_year = Integer.parseInt(m_yearField.getText());
	}//GEN-LAST:event_m_yearFieldFocusLost

	private void formWindowDeactivated(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowDeactivated
	{//GEN-HEADEREND:event_formWindowDeactivated
		KeyboardProcessorStack.getInstance().popKeyProcessorStack();
	}//GEN-LAST:event_formWindowDeactivated

	private void formWindowActivated(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowActivated
	{//GEN-HEADEREND:event_formWindowActivated
		KeyboardProcessorStack.getInstance().pushKeyProcessorStack(m_keyProcessor);
	}//GEN-LAST:event_formWindowActivated

	private void m_secondFieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_m_secondFieldFocusGained
	{//GEN-HEADEREND:event_m_secondFieldFocusGained
		m_secondField.selectAll();
	}//GEN-LAST:event_m_secondFieldFocusGained

	private void m_secondFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_secondFieldActionPerformed
	{//GEN-HEADEREND:event_m_secondFieldActionPerformed
		m_secondField.transferFocus();
		if(m_secondField.getText().matches("[0-9]+"))
		{
			int sec = Integer.parseInt(m_secondField.getText());
			if((sec > -1)&&(sec < 61))
			{
				m_dateTime.m_second = sec;
				m_secondField.transferFocus();
				return;
			}
		}
		
		m_secondField.setText(String.valueOf(m_dateTime.m_second));
		m_secondField.selectAll();
	}//GEN-LAST:event_m_secondFieldActionPerformed

	private void m_minuteFieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_m_minuteFieldFocusGained
	{//GEN-HEADEREND:event_m_minuteFieldFocusGained
		m_minuteField.selectAll();
	}//GEN-LAST:event_m_minuteFieldFocusGained

	private void m_minuteFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_minuteFieldActionPerformed
	{//GEN-HEADEREND:event_m_minuteFieldActionPerformed
		if(m_minuteField.getText().matches("[0-9]+"))
		{
			int min = Integer.parseInt(m_minuteField.getText());
			if((min > -1)&&(min < 61))
			{
				m_dateTime.m_minute = min;
				m_minuteField.transferFocus();
			}
		}
		
		m_minuteField.setText(String.valueOf(m_dateTime.m_minute));
		m_minuteField.selectAll();
	}//GEN-LAST:event_m_minuteFieldActionPerformed

	private void m_hourFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_hourFieldActionPerformed
	{//GEN-HEADEREND:event_m_hourFieldActionPerformed
		if(m_hourField.getText().matches("[0-9]+"))
		{
			int h = Integer.parseInt(m_hourField.getText());
			if((h > -1)&&(h < 61))
			{
				m_dateTime.m_hour = h;
				m_hourField.transferFocus();
			}
		}
		
		m_hourField.setText(String.valueOf(m_dateTime.m_hour));
		m_hourField.selectAll();
	}//GEN-LAST:event_m_hourFieldActionPerformed

	private void m_hourFieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_m_hourFieldFocusGained
	{//GEN-HEADEREND:event_m_hourFieldFocusGained
		m_hourField.selectAll();
	}//GEN-LAST:event_m_hourFieldFocusGained

	private void m_yearFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_yearFieldActionPerformed
	{//GEN-HEADEREND:event_m_yearFieldActionPerformed
		if(m_yearField.getText().matches("[1-9][0-9]*"))
		{
			m_dateTime.m_year = Integer.parseInt(m_yearField.getText());
			m_yearField.transferFocus();
		}
		else
		{
			m_yearField.setText(String.valueOf(m_dateTime.m_year));
			m_yearField.selectAll();
		}
	}//GEN-LAST:event_m_yearFieldActionPerformed

	private void m_yearFieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_m_yearFieldFocusGained
	{//GEN-HEADEREND:event_m_yearFieldFocusGained
		m_yearField.selectAll();
	}//GEN-LAST:event_m_yearFieldFocusGained

	private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
	{//GEN-HEADEREND:event_formWindowClosing
		cancelChange();
	}//GEN-LAST:event_formWindowClosing

	private void m_cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_cancelButtonActionPerformed
	{//GEN-HEADEREND:event_m_cancelButtonActionPerformed
		cancelChange();
	}//GEN-LAST:event_m_cancelButtonActionPerformed

	private void m_okButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_okButtonActionPerformed
	{//GEN-HEADEREND:event_m_okButtonActionPerformed
		commitChange();
	}//GEN-LAST:event_m_okButtonActionPerformed
	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String[] args)
	{
		JFrame thisFrame = new JFrame();
		MiDateTimeDialog dialog = new MiDateTimeDialog(thisFrame, "Time Modification", new MiDateTime(), new MiDateTimeDialog.DateTimeListener()
		{
			public void onCommit(MiDateTime dateTime, JDialog source)
			{
				source.dispose();
			}
			
			public void onCancel(JDialog source)
			{
				source.dispose();
			}
		});
		dialog.pack();
		dialog.setVisible(true);
		thisFrame.dispose();
	}
	
	private String convertMonthInt2String(int month) throws InvalidArgumentException
	{
		Integer monthObj = new Integer(month);
		if(m_monthMapIntKey.containsKey(monthObj))
		{
			return m_monthMapIntKey.get(monthObj);
		}
		throw new MiDateTimeDialog.InvalidArgumentException("Invalid month " + month);
	}
	
	private int convertMonthString2Int(String month) throws InvalidArgumentException
	{
		if(m_monthMapStringKey.containsKey(month))
		{
			return (m_monthMapStringKey.get(month)).intValue();
		}
		throw new MiDateTimeDialog.InvalidArgumentException("Invalid month " + month);
	}
	
	private void updateGui()
	{
		try
		{
			m_yearField.setText(String.valueOf(m_dateTime.m_year));
			m_monthField.setSelectedItem(convertMonthInt2String(m_dateTime.m_month));
			m_dayField.setSelectedIndex(m_dateTime.m_day);
			m_hourField.setText(String.valueOf(m_dateTime.m_hour));
			m_minuteField.setText(String.valueOf(m_dateTime.m_minute));
			m_secondField.setText(String.valueOf(m_dateTime.m_second));
		}
		catch(MiDateTimeDialog.InvalidArgumentException e)
		{
			MiSystem.logWarning(Category.DESIGN, MiExceptionUtil.simpleTrace(e));
		}
		catch(Exception e)
		{
			MiSystem.logError(Category.DESIGN, MiExceptionUtil.simpleTrace(e));
		}
	}
	
	private void initializeMonthField()
	{
		Iterator iter = m_monthMapIntKey.values().iterator();
        while(iter.hasNext())
        {
            m_monthField.addItem(iter.next());
        }
	}
	
	private void initializeDayField()
	{
		for(int i = 1; i < 32; ++i)
		{
			m_dayField.addItem(String.valueOf(i));
		}
	}
	
	private void commitChange()
	{
		if(null != m_listener)
		{
			m_listener.onCommit(m_dateTime, this);
		}
		else
			dispose();
	}
	
private void cancelChange()
	{
		if(null != m_listener)
		{
			m_listener.onCancel(this);
		}
		else
			dispose();
	}
	
	public abstract interface DateTimeListener
	{
		
		public abstract void onCommit(MiDateTime dateTime, JDialog source);
		public abstract void onCancel(JDialog source);
		
	}
	
	public class InvalidArgumentException extends Exception
	{
		private static final long serialVersionUID = 1L;
		
		public InvalidArgumentException(java.lang.String description)
		{
			super(description);
		}
	}
	
	private class keyProcessor implements java.awt.KeyEventPostProcessor
	{
		
		public boolean postProcessKeyEvent(KeyEvent keyEvent)
		{
			KeyStroke key = KeyStroke.getKeyStrokeForEvent(keyEvent);
			if(( key.getKeyCode() == KeyEvent.VK_ESCAPE )
			&&(key.getKeyEventType()==KeyEvent.KEY_PRESSED))
			{
				cancelChange();
				return true;
			}
			else if(( key.getKeyCode() == KeyEvent.VK_ENTER )
			&&(key.getKeyEventType()==KeyEvent.KEY_PRESSED))
			{
				if(m_okButton.isFocusOwner())
				{
					commitChange();
					return true;
				}
				if(m_cancelButton.isFocusOwner())
				{
					cancelChange();
					return true;
				}
			}
			return false;
		}
		
	}
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel datePanel;
    private javax.swing.JButton m_cancelButton;
    private javax.swing.JComboBox m_dayField;
    private javax.swing.JTextField m_hourField;
    private javax.swing.JTextField m_minuteField;
    private javax.swing.JComboBox m_monthField;
    private javax.swing.JButton m_okButton;
    private javax.swing.JTextField m_secondField;
    private javax.swing.JTextField m_yearField;
    private javax.swing.JPanel timePanel;
    // End of variables declaration//GEN-END:variables

	private final MiDateTime m_dateTime;
	
	private static final AbstractMap<Integer, String> m_monthMapIntKey = new TreeMap<Integer, String>();
	private static final AbstractMap<String, Integer> m_monthMapStringKey = new TreeMap<String, Integer>();
	
	private final MiDateTimeDialog.DateTimeListener m_listener;
	
	private final keyProcessor m_keyProcessor = new keyProcessor();
	
	static 
	{
		m_monthMapIntKey.put(new Integer(Calendar.JANUARY), java.util.ResourceBundle.getBundle("com/mitel/guiutil/GeneralGui").getString("januaryLabel"));
		m_monthMapIntKey.put(new Integer(Calendar.FEBRUARY), java.util.ResourceBundle.getBundle("com/mitel/guiutil/GeneralGui").getString("februaryLabel"));
		m_monthMapIntKey.put(new Integer(Calendar.MARCH), java.util.ResourceBundle.getBundle("com/mitel/guiutil/GeneralGui").getString("marchLabel"));
		m_monthMapIntKey.put(new Integer(Calendar.APRIL), java.util.ResourceBundle.getBundle("com/mitel/guiutil/GeneralGui").getString("aprilLabel"));
		m_monthMapIntKey.put(new Integer(Calendar.MAY), java.util.ResourceBundle.getBundle("com/mitel/guiutil/GeneralGui").getString("mayLabel"));
		m_monthMapIntKey.put(new Integer(Calendar.JUNE), java.util.ResourceBundle.getBundle("com/mitel/guiutil/GeneralGui").getString("juneLabel"));
		m_monthMapIntKey.put(new Integer(Calendar.JULY), java.util.ResourceBundle.getBundle("com/mitel/guiutil/GeneralGui").getString("julyLabel"));
		m_monthMapIntKey.put(new Integer(Calendar.AUGUST), java.util.ResourceBundle.getBundle("com/mitel/guiutil/GeneralGui").getString("augustLabel"));
		m_monthMapIntKey.put(new Integer(Calendar.SEPTEMBER), java.util.ResourceBundle.getBundle("com/mitel/guiutil/GeneralGui").getString("septemberLabel"));
		m_monthMapIntKey.put(new Integer(Calendar.OCTOBER), java.util.ResourceBundle.getBundle("com/mitel/guiutil/GeneralGui").getString("octoberLabel"));
		m_monthMapIntKey.put(new Integer(Calendar.NOVEMBER), java.util.ResourceBundle.getBundle("com/mitel/guiutil/GeneralGui").getString("novemberLabel"));
		m_monthMapIntKey.put(new Integer(Calendar.DECEMBER), java.util.ResourceBundle.getBundle("com/mitel/guiutil/GeneralGui").getString("decemberLabel"));

		Set<Entry<Integer, String>> entries = m_monthMapIntKey.entrySet();
		Iterator<Entry<Integer, String>> iter = entries.iterator();
		while(iter.hasNext())
		{
			Entry<Integer, String> entry = iter.next();
			m_monthMapStringKey.put(entry.getValue(), entry.getKey());
		}
	}
	
}
