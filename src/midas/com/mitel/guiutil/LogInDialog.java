/*
 * LogInDialog.java
 *
 * Created on April 16, 2004, 10:57 PM
 */

package com.mitel.guiutil;

import com.mitel.icp.IcpProcessor;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.*;

/**
 *
 * @author  haiv
 */
public class LogInDialog extends JDialog
{
	private static final long serialVersionUID = 1L;
	
	/** 
	 * <p>Creates a new instance of LogInDialog.</p> 
	 * <b>THIS MUST BE INVOKED FROM THE CONTEXT OF THE AWT EVENT DISPATCH THREAD.
	 * Use safeInstantiate() to be on the safe side.</b>
	 * @param parent Parent frame of this dialog.
	 * @param server Name of ICP server against which the login dialog is presented. For display purposes.
	 * @param processor Name of processor in the aforementioned ICP against which the login dialog is presented. For display purposes.
	 * @param userId Initial user ID. For display purposes.
	 * @param passWd Initial password. For display purposes.
	 * @param listener Listener for receiving result.
	 */
	public LogInDialog(Frame parent, String server, IcpProcessor.ProcessorName processor, String userId, String passWd, iLogInListener listener)
	{
		super(parent, true);
		
		m_processor = processor;
		m_UserId = userId;
		m_PassWd = passWd;
		m_Listener = listener;
		m_Server = server;
		m_ParentFrame = parent;
		initComponents();
		int x = parent.getX()+(parent.getWidth()/2)-(getWidth()/2);
		int y = parent.getY()+(parent.getHeight()/2)-(getHeight()/2);
		if( x < 0 )
			x=0;
		if( y < 0 )
			y=0;
		setLocation(x,y);
		
		MiGuiUtil.registerKeyAction(getRootPane(), KeyEvent.VK_ESCAPE, new AbstractAction()
		{
			private static final long serialVersionUID = 1L;
			@Override
			public void actionPerformed(ActionEvent e)
			{
				fireCancelEvent();
			}
		});
	}
	
	/**
	 * A way to instantiate a login dialog from outside of the AWT event dispatch thread.
	 * @param parent Parent frame of this dialog.
	 * @param server Name of ICP server against which the login dialog is presented. For display purposes.
	 * @param processor Name of processor in the aforementioned ICP against which the login dialog is presented. For display purposes.
	 * @param userId Initial user ID. For display purposes.
	 * @param passWd Initial password. For display purposes.
	 * @param listener Listener for receiving result.
	 * @return An instance of the login dialog, or null if one can not be instantiated.
	 */
	public static LogInDialog safeInstantiate(Frame parent, String server, IcpProcessor.ProcessorName processor, String userId, String passWd, iLogInListener listener)
	{
		if(SwingUtilities.isEventDispatchThread())
		{
			return new LogInDialog(parent, server, processor, userId, passWd, listener);
		}
		LogInDialog ret;
		synchronized(gLock)
		{
			try
			{
				gTmpInstance = null;
				SwingUtilities.invokeLater(new SwingTaskDialogInstantiator(parent, server, processor, userId, passWd, listener));
				gLock.wait(20000);
			}
			catch(InterruptedException ex)
			{
			}
			ret = gTmpInstance;
			gTmpInstance = null;
		}
		return ret;
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        final javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        final javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        m_ServerName = new javax.swing.JLabel();
        final javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        m_UserIdField = new javax.swing.JTextField();
        final javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        m_PasswordField = new javax.swing.JPasswordField();
        jPanel2 = new javax.swing.JPanel();
        m_buttonOk = new javax.swing.JButton();
        m_buttonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/mitel/guiutil/GeneralGui"); // NOI18N
        setTitle(bundle.getString("icpLoginTitleLabel")); // NOI18N
        setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.BorderLayout(4, 4));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ICP Login");
        getContentPane().add(jLabel1, java.awt.BorderLayout.NORTH);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8));
        jPanel1.setLayout(new java.awt.GridLayout(3, 2, 8, 8));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText(bundle.getString("loginHostLabel")); // NOI18N
        jPanel1.add(jLabel4);

        m_ServerName.setFont(new java.awt.Font("Arial", 1, 12));
        m_ServerName.setForeground(new java.awt.Color(153, 0, 51));
        m_ServerName.setText("jLabel5");
        m_ServerName.setText(m_Server + "." + m_processor);
        jPanel1.add(m_ServerName);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText(bundle.getString("userIdLabel")); // NOI18N
        jPanel1.add(jLabel2);

        m_UserIdField.setText("User ID");
        m_UserIdField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_UserIdFieldActionPerformed(evt);
            }
        });
        m_UserIdField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                m_UserIdFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                m_UserIdFieldFocusLost(evt);
            }
        });
        jPanel1.add(m_UserIdField);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText(bundle.getString("passwordLabel")); // NOI18N
        jPanel1.add(jLabel3);

        m_PasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_PasswordFieldActionPerformed(evt);
            }
        });
        m_PasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                m_PasswordFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                m_PasswordFieldFocusLost(evt);
            }
        });
        jPanel1.add(m_PasswordField);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 8, 8));
        jPanel2.setRequestFocusEnabled(false);
        jPanel2.setVerifyInputWhenFocusTarget(false);

        m_buttonOk.setText(bundle.getString("okLabel")); // NOI18N
        m_buttonOk.setMaximumSize(new java.awt.Dimension(1000, 1000));
        m_buttonOk.setPreferredSize(new java.awt.Dimension(60, 27));
        m_buttonOk.setCursor(new Cursor(Cursor.HAND_CURSOR));
        m_buttonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_buttonOkActionPerformed(evt);
            }
        });
        jPanel2.add(m_buttonOk);

        m_buttonCancel.setText(bundle.getString("cancelLabel")); // NOI18N
        m_buttonCancel.setMaximumSize(new java.awt.Dimension(1000, 1000));
        m_buttonCancel.setPreferredSize(new java.awt.Dimension(80, 27));
        m_buttonCancel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        m_buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_buttonCancelActionPerformed(evt);
            }
        });
        jPanel2.add(m_buttonCancel);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void m_buttonCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_buttonCancelActionPerformed
	{//GEN-HEADEREND:event_m_buttonCancelActionPerformed
		fireCancelEvent();
	}//GEN-LAST:event_m_buttonCancelActionPerformed

	private void m_buttonOkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_buttonOkActionPerformed
	{//GEN-HEADEREND:event_m_buttonOkActionPerformed
		fireAcceptEvent();
	}//GEN-LAST:event_m_buttonOkActionPerformed

	private void m_PasswordFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_m_PasswordFieldFocusLost
	{//GEN-HEADEREND:event_m_PasswordFieldFocusLost
		m_PassWd = new String(m_PasswordField.getPassword());
	}//GEN-LAST:event_m_PasswordFieldFocusLost

	private void m_UserIdFieldFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_m_UserIdFieldFocusLost
	{//GEN-HEADEREND:event_m_UserIdFieldFocusLost
		m_UserId = m_UserIdField.getText();
	}//GEN-LAST:event_m_UserIdFieldFocusLost

	private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
	{//GEN-HEADEREND:event_formWindowClosing
		// This is where the dialog window is closed manually, we don't want the client
		// to close this again later
		fireCancelEvent();
	}//GEN-LAST:event_formWindowClosing

	private void m_PasswordFieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_m_PasswordFieldFocusGained
	{//GEN-HEADEREND:event_m_PasswordFieldFocusGained
		m_PasswordField.selectAll();
	}//GEN-LAST:event_m_PasswordFieldFocusGained

	private void m_PasswordFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_PasswordFieldActionPerformed
	{//GEN-HEADEREND:event_m_PasswordFieldActionPerformed
		m_PassWd = new String(m_PasswordField.getPassword());
		m_UserId = m_UserIdField.getText();
		if( null != m_Listener )
		{
			m_Listener.handleLoginEvent(new LogInDialog.LogInEvent( m_UserId, m_PassWd, true/*Success*/, this ));
			m_Listener = null;
		}
		dispose();
	}//GEN-LAST:event_m_PasswordFieldActionPerformed

	private void formWindowActivated(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowActivated
	{//GEN-HEADEREND:event_formWindowActivated
		m_UserIdField.setText(m_UserId);
		m_PasswordField.setText(m_PassWd);
		m_UserIdField.requestFocusInWindow();
	}//GEN-LAST:event_formWindowActivated

	private void m_UserIdFieldFocusGained(java.awt.event.FocusEvent evt)//GEN-FIRST:event_m_UserIdFieldFocusGained
	{//GEN-HEADEREND:event_m_UserIdFieldFocusGained
		if( !evt.isTemporary())
		{
			m_UserIdField.selectAll();
		}
	}//GEN-LAST:event_m_UserIdFieldFocusGained

	private void m_UserIdFieldActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_m_UserIdFieldActionPerformed
	{//GEN-HEADEREND:event_m_UserIdFieldActionPerformed
		//Now give the focus to the password field
		m_UserId = m_UserIdField.getText();
		m_PasswordField.requestFocusInWindow();
	}//GEN-LAST:event_m_UserIdFieldActionPerformed
	
	/**
	 * @param args the command line arguments
	 */
	public static void main(String[] args)
	{
		MiLookAndFeel.setCurrentLookAndFeel(MiLookAndFeel.LAF_SUBSTANCE_BUSINESS);
		SwingUtilities.invokeLater(new Runnable()
		{
			public void run()
			{
				final JFrame testFrame = new JFrame();
				new LogInDialog(testFrame, "MyServer", IcpProcessor.ProcessorName.RTC, "Enter User ID", "****", new LogInDialog.iLogInListener()
				{
					@Override
					public void handleLoginEvent(LogInEvent evt)
					{
					}

					@Override
					public void handleCancelEvent(LogInEvent evt)
					{
						testFrame.dispose();
					}
				}).setVisible(true);
				testFrame.dispose();
			}
		});
		
	}
	
	public void registerListener(iLogInListener aListener)
	{
		m_Listener = aListener;
	}
	
	private void fireAcceptEvent()
	{
		m_PassWd = new String(m_PasswordField.getPassword());
		m_UserId = m_UserIdField.getText();
		if( null != m_Listener )
		{
			m_Listener.handleLoginEvent(new LogInDialog.LogInEvent( m_UserId, m_PassWd, true/*Success*/, this ));
			m_Listener = null;
		}
		dispose();
	}
	
	private void fireCancelEvent()
	{
		if( null != m_Listener )
		{
			m_Listener.handleCancelEvent( new LogInDialog.LogInEvent( m_UserId, m_PassWd, false /*Success*/, this ));
			m_Listener = null;
		}
		dispose();
	}
	/**
	 * Listener interface for login requests.
	 */
	public static interface iLogInListener
	{
		/**
		 * The user committed the login process.
		 * @param evt The login event.
		 */
		public abstract void handleLoginEvent(LogInEvent evt);
		/**
		 * The user cancelled the login request.
		 * @param evt The cancel event.
		 */
		public abstract void handleCancelEvent(LogInEvent evt);
	}
	
	public static class LogInEvent
	{
		public final String newPassword;
		public final String newUserId;
		public final JDialog logInDialog;
		public final boolean success;
		
		public LogInEvent(java.lang.String userId, java.lang.String passWd, boolean successFlag, JDialog loginDialog)
		{
			newUserId = userId;
			newPassword = passWd;
			success = successFlag;
			logInDialog = loginDialog;
		}
		
		@Override
		public String toString()
		{
			return "<LogInEvent><UserID>" + newUserId + "</UserID><PassWd>" + newPassword + "</PassWd><Success>" + success + "</Success></LogInEvent>";
		}
		
	}

	/**
	 * 
	 */
	private static class SwingTaskDialogInstantiator implements Runnable
	{
		private  final Frame parentFrame;
		private final String icpName;
		private final IcpProcessor.ProcessorName processorName;
		private final String userId;
		private final String password;
		private final iLogInListener loginListener;
		private SwingTaskDialogInstantiator(Frame parent, String server, IcpProcessor.ProcessorName processor, String user, String passWd, iLogInListener listener)
		{
			parentFrame = parent;
			icpName = server;
			processorName = processor;
			userId = user;
			password = passWd;
			loginListener = listener;
		}

		@Override
		public void run()
		{
			synchronized(gLock)
			{
				gTmpInstance = new LogInDialog(parentFrame, icpName, processorName, userId, password, loginListener);
				gLock.notify();
			}	
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPasswordField m_PasswordField;
    private javax.swing.JLabel m_ServerName;
    private javax.swing.JTextField m_UserIdField;
    private javax.swing.JButton m_buttonCancel;
    private javax.swing.JButton m_buttonOk;
    // End of variables declaration//GEN-END:variables

	private String m_PassWd = "********";	
	
	private String m_UserId = "Enter user ID here";
	
	private iLogInListener m_Listener;
	
	private String m_Server;
	
	private IcpProcessor.ProcessorName m_processor;
	
	private final Frame m_ParentFrame;

	private static LogInDialog gTmpInstance;
	private static final Object gLock = new Object();
	
}
