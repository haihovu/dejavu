/*
 * about.java
 *
 * Created on November 15, 2003, 4:23 PM
 */

package com.mitel.guiutil;

import java.awt.AlphaComposite;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.geom.AffineTransform;
import java.awt.image.ImageObserver;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.imageio.ImageIO;
import javax.swing.*;

/**
 * An animated panel displaying a number of strings and images using Java 2D.
 * @author  Hai Vu
 */
public class AboutPanel extends JPanel implements Runnable 
{
	private static final long serialVersionUID = 1L;
    
	/** Creates new form about
	 * @param info The information object containing strings and images to be displayed in the about panel
	 */
    public AboutPanel(AboutInformation info) 
	{
		m_Info = info;
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        topPanel = new MyPanel(m_Info.m_ImageName, m_Info.m_Size, m_Info.m_OtherStrings,MAX_NUMBER_OF_SCENES);

        setLayout(new java.awt.BorderLayout());

        topPanel.setBackground(new java.awt.Color(255, 255, 255));
        topPanel.setDoubleBuffered(false);
        add(topPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) 
	{
		MiLookAndFeel.setCurrentLookAndFeel(MiLookAndFeel.LAF_SUBSTANCE_CREME_COFFEE);
		SwingUtilities.invokeLater(new Runnable() {

			public void run()
			{
				JFrame parentFrame = new JFrame();
				List<String> strs = new ArrayList<String>();
				strs.add(0, "A Deja Vu Production");
				strs.add(1, "Created by Hai Vu");
				strs.add(2, "For Mitel's ICP family of fine products");
				strs.add(3, "Powered by Java");
				strs.add(4, "Developed with NetBeans (www.netbeans.org)");
				strs.add(5, "Made in Canada");

				AboutInformation info = new AboutInformation("Deja Vu - MiDAS", 
					"images/midas.gif", new Dimension(400, 250), strs);
				AboutPanel thisPanel = new AboutPanel( info );
				parentFrame.getContentPane().setLayout(new BorderLayout());
				parentFrame.getContentPane().add(thisPanel);
				parentFrame.setTitle(info.m_Title);
				parentFrame.pack();
				thisPanel.start();
				parentFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
				parentFrame.setVisible(true);
			}
		});
    }
    
    public void run() 
    {
		try
        {
			int safetyBreak = 1000;
			
			MyPanel myPanel = (MyPanel)topPanel;
			// Now go through remaining acts
			while(true)
			{
				if(--safetyBreak < 0)
				{
					break;
				}
				
				if(myPanel.nextAct())
				{
					for( int i = 0; i < MAX_NUMBER_OF_SCENES; ++i )
					{
						myPanel.nextScene();
						
						// Let the event dispatching thread run, this will ultimately
						// invoke MyPanel.paintComponent().
						repaint();
						Thread.sleep(10);
						myPanel.waitForSceneToBePainted(1000);
					}
				}
				else
				{
					// Act not ready. This typically at startup so that
					// all images can be loaded
					Thread.sleep(100);
				}
            }
        }
        catch( Exception e )
        {
            // Do nothing
        }
		//((MyPanel)topPanel).cleanup();
		m_Thread = null;
    }    
    
    public void start() 
    {
        m_Thread = new Thread(this);
		m_Thread.setPriority(Thread.currentThread().getPriority() - 1);
		m_Thread.start();
    }
    
	/**
	 * This is the animated panel.
	 */	
    public static class MyPanel extends JPanel implements ImageObserver 
	{
		private static final long serialVersionUID = 1L;

		/**
		 * Has the current scene been painted?
		 */
		private boolean m_scenePainted;
        private double m_theta = 0.0;
        private int m_x = 0;
        private int m_y = 0;
		private double m_scale = 0.2;
		private double m_scaleInc = 0.0;
        private Image m_titleImage;
        private int m_numScenes = 0;
		private static final int M_X_OFFSET = 10;
		/**
		 * Current act
		 */
		private int m_act = 0;
		private int m_TitleImageHeight = 80;
		
		private List m_OtherStrings;
		
		private int m_Width = 400;
		
		private int m_Height = 230;
		
		/**
		 * Flag indicating whether animation is ready to commence.
		 * This is set to true once all images have been loaded.
		 * Note that images can take some time to load.
		 */
		private boolean m_Ready = false;
		
        public MyPanel(String titleImg, Dimension size, List otherStrs, int numberOfScenes) 
        {
			try
			{
				m_titleImage = ImageIO.read(getClass().getClassLoader().getResource(titleImg));
				int height = m_titleImage.getHeight(this);
				if(0 < height)
					m_TitleImageHeight = height;
				m_OtherStrings = otherStrs;
				m_numScenes = numberOfScenes;
				m_Width = size.width;
				m_Height = size.height;
				setPreferredSize(size);
				resetAnim();
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
        }
		
		@Override
        public void paintComponent(Graphics g)
        {
			Graphics2D g2d = (Graphics2D)g.create();

			// Set quality hints
			Map<?,?> hints = (Map<?,?>)Toolkit.getDefaultToolkit().getDesktopProperty("awt.font.desktophints");
			if(hints != null)
			{
				g2d.addRenderingHints(hints);
			}
			
			switch(getAct())
			{
				case 0:
					openning(g2d);
					break;

				case 1:
					act1(g2d);
					break;

				case 2:
					act2(null, g2d);
					break;

				case 3:
					// Just go ahead and draw the image
					break;

				default:
					// Should never get to this point
					return;
			}
			
			synchronized(this)
			{
				m_scenePainted = true;
				notify();
			}
			
			g2d.dispose();
        }
        
		/**
		 * Wait for the current scene to be painted
		 * @param timeoutMs A mount of time to wait
		 * @throws java.lang.InterruptedException If the calling thread is interrupted
		 */
		public synchronized void waitForSceneToBePainted(int timeoutMs) throws InterruptedException
		{
			if(m_scenePainted)
				return;
			
			wait(timeoutMs);
		}
		
		/**
		 * Moves to the next scene in the act.
		 */
        public synchronized void nextScene() 
        {
			m_scenePainted = false;
			
            m_theta -= 0.1;
            if( 0.0 > m_theta )
                m_theta = 0.0;

            m_x -= 4;
            m_y -= 4;
            if( 0 > m_x )
                m_x = 0;
            if( 0 > m_y )
                m_y = 0;
			
			m_scale += m_scaleInc;
			if( m_scale > 1.0 )
				m_scale = 1.0;
        }
		
		/**
		 * In this act, all strings are displayed.
		 * @param g2d Graphics used for rendering content
		 */
		private void act1(Graphics2D g2d) 
		{
			String str;
			
			// Set background color
			g2d.setBackground(Color.LIGHT_GRAY);
			g2d.setColor(Color.WHITE);
			g2d.fillRect(0, 0, m_Width, m_Height);
			
			// Display the spinning title image
            AffineTransform savedAt = g2d.getTransform();
            g2d. translate(m_x, m_y);
			synchronized(this) {
				g2d. rotate(m_theta);
			}
			g2d. scale(m_scale, m_scale);
            g2d. drawImage(m_titleImage, 0, 0, this );
			
			// Display spinning creation for (use the same transform as the title image)
            if((m_OtherStrings.size()>1)&&( null != (str = (String)m_OtherStrings.get(1))))
			{
				g2d.setFont(new Font("Arial", Font.PLAIN, 16 ));
				g2d.setColor(new Color(90, 90, 90));
				g2d.drawString(str, 0, m_TitleImageHeight + 40 - m_y);
			}
			// Reset the transform to the original default (stop the spinning)
            g2d.setTransform(savedAt); 

			// Display creation line
            if((m_OtherStrings.size()>0)&&( null != (str = (String)m_OtherStrings.get(0))))
			{
				g2d.setFont(new Font("Times New Roman", Font.ITALIC | Font.BOLD, 18 ));
				g2d.drawString(str, m_x, m_TitleImageHeight + 20);
			}

			for( int i = 2; i < m_OtherStrings.size(); ++i )
			{
				int fontSize = 16 - i;
				if(fontSize < 12)
					fontSize = 12;
				
				if( null != (str = (String)m_OtherStrings.get(i)))
				{
					g2d.setFont(new Font( "Arial", Font.PLAIN, fontSize));
					g2d.drawString(str, (M_X_OFFSET*2) - m_x, m_TitleImageHeight + 80 - m_y + (i-3)*20);
				}
			}
		}
		
		/**
		 * In this act, some lines are superimpose on the image.
		 * @param prevAct Last image from the previous act
		 * @param g2d The graphics object used for rendering stuff
		 */
		private void act2(Image prevAct, Graphics2D g2d) 
		{
			if( null != prevAct )
			{
				g2d.drawImage(prevAct, 0, 0, this);
			}
			
			AlphaComposite ac = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.6f);
			g2d.setComposite(ac);

			g2d.setColor(new Color(123,123,123));
			g2d.fillRect(m_Width-50, 0, 30, m_Height-(m_y));
			
			g2d.setColor(new Color(190,190,190));
			g2d.fillRect(0, m_Height-30, m_Width-(m_x-M_X_OFFSET), 10);
		}
		
		/**
		 * Move to the next act
		 * @return True if successful, false if we are not ready to move to the new act.
		 * @throws com.mitel.guiutil.AboutPanel.MyPanel.ActException If we have reached the end of the play, no more act to follow.
		 */
		public synchronized boolean nextAct() throws ActException
		{
			if(m_Ready)
			{
				if(m_act < 3)
				{
					++m_act;
				}
				else
				{
					throw new ActException("Play Ends");
				}
				resetAnim();
				return true;
			}
			return false;
		}
		
		/**
		 * Retrieves the current act number
		 * @return The current act number
		 */
		public synchronized int getAct()
		{
			return m_act;
		}
		
		/**
		 * Resets all the animation parameters to the beginning of the act.
		 */
		private void resetAnim() 
		{
			synchronized(this) {
				// Theta decreases in steps of 0.1 to zero
				m_theta = m_numScenes * 0.1;
			}
			// M_X decreases from from value to M_X_OFFSET in steps of 4
			m_x = m_numScenes * 4 + M_X_OFFSET;

			// M_Y decreases from from value to 0 in steps of 4
			m_y = m_numScenes * 4;
			
			// ScaleInc lets scale to increment by 80% after all the scenes are played out
			m_scaleInc = 0.8 / m_numScenes;
			
			// Scale starts at 20% and increases to 100%
			m_scale = 0.2;
		}
		
		private void openning(Graphics2D g2d)
		{
			// Set white background
			g2d.setBackground(Color.WHITE);
			g2d.setColor(Color.WHITE);
			g2d.fillRect(0, 0, m_Width, m_Height);
			
			g2d.setFont(new Font( "Arial", Font.BOLD | Font.ITALIC, 16 ));
			g2d.setColor(Color.BLUE);
			g2d.drawString("Loading", 10, 25);
			
			// Display the title image
            m_Ready = g2d.drawImage(m_titleImage, 100, 10, this);
		}
		
		@Override
		public boolean imageUpdate(Image img, int infoflags, int x, int y, int width, int height)
		{
			if((infoflags & ImageObserver.ALLBITS) != 0)
			{
				m_Ready = true;
				m_TitleImageHeight = height;
				return false;
			}
			else if((infoflags & ImageObserver.HEIGHT) != 0)
			{
				m_TitleImageHeight = height;
			}
			return true;
		}
		
		public static class ActException extends Exception
		{
			private static final long serialVersionUID = 1L;
			
			public ActException(java.lang.String desc)
			{
				super(desc);
			}
			
		}
		
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
	
	/**
	 * Maximum number of scenes per act
	 */
	private static final int MAX_NUMBER_OF_SCENES = 50;
	private Thread m_Thread = null;
	
	private AboutInformation m_Info;
	
}
