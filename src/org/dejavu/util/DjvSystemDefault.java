/* Generated by Together */
package org.dejavu.util;

import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * The default implementation of the DjvSystem interface for managing system
 * properties.
 */
public class DjvSystemDefault extends DjvSystem {

	/**
	 * Default constructor
	 */
	public DjvSystemDefault() {
		super();
	}

	@Override
	protected void sysSetVersion(String component, String version) {
		synchronized(versionMap) {
			versionMap.put(component, version);
		}
	}

	@Override
	protected String sysGetVersion(String component) {
		synchronized(versionMap) {
			String retValue = versionMap.get(component);
			return retValue != null ? retValue : "";
		}
	}

	@Override
	protected String sysGetProperty(String propertyName) {
		synchronized (properties) {
			String retValue = properties.get(propertyName);

			if (null == retValue) {
				retValue = ""; // Never return null
			}
			return retValue;
		}
	}

	@Override
	protected void sysSetProperty(String propertyName, String value) {
		synchronized (properties) {
			properties.put(propertyName, value);
		}
	}

	@Override
	protected Element sysExportProperties(Document ownerDoc) {
		Element retValue = ownerDoc.createElement("SystemProperties");
		synchronized (properties) {
			Iterator<Entry<String, String>> iter = properties.entrySet().iterator();
			while (iter.hasNext()) {
				Entry<String, String> property = iter.next();
				Element propElement = ownerDoc.createElement("Property");
				propElement.setAttribute("name", property.getKey());
				propElement.setAttribute("value", property.getValue());
				retValue.appendChild(propElement);
			}
		}
		return retValue;
	}

	@Override
	protected void sysImportProperties(Document xmlDocument) {
		if (null == xmlDocument) {
			return;
		}

		NodeList propList = xmlDocument.getElementsByTagName("SystemProperties");
		int len = propList.getLength();
		for (int i = 0; i < len; ++i) {
			Node node = propList.item(i);
			if (node instanceof Element) {
				Element propElement = (Element) node;
				NodeList children = propElement.getChildNodes();
				int numChildren = children.getLength();
				for (int j = 0; j < numChildren; ++j) {
					Node child = children.item(j);
					if (child instanceof Element) {
						Element childElement = (Element) child;
						String elName = childElement.getAttribute("name");
						String elValue = childElement.getAttribute("value");
						if (elName.equals(DjvSystemProperty.MIPROPERTY_LOG_LEVEL)) {
							try {
								setLogLevel(Integer.parseInt(elValue));
							} catch (NumberFormatException ex) {
							}
						} else if (elName.equals(DjvSystemProperty.MIPROPERTY_DIAGNOSTIC_ENABLED)) {
							if (Boolean.parseBoolean(elValue)) {
								enableDiagnostic();
							} else {
								disableDiagnostic();
							}
						} else {
							sysSetProperty(elName, elValue);
						}
					}
				}
			}
		}
	}

	@Override
	protected Set<Map.Entry<String, String>> sysGetProperties() {
		synchronized (properties) {
			return properties.entrySet();
		}
	}

	private static final AbstractMap<String, String> versionMap = new HashMap<>();
	private static final AbstractMap<String, String> properties = new HashMap<>();
}
