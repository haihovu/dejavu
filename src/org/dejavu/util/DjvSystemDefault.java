/* Generated by Together */

package org.dejavu.util;

import java.util.AbstractMap;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * The default implementation of the DjvSystem interface for managing system properties.
 */
public class DjvSystemDefault extends DjvSystem 
{
	/**
	 * Default constructor
	 */
	public DjvSystemDefault()
	{		
		super();		
	}

	/**
	 * Sets the version of a component.
	 */
	protected void sysSetVersion(String component, String version)
	{
		m_VersionMap.put(component, version);
	}

	/**
	 * Gets the version of a component.
	 */
	protected String sysGetVersion(String component)
	{
		String retValue = m_VersionMap.get(component);
		if(null != retValue)
			return retValue;
		
		return "";
	}

	protected String sysGetProperty(String propertyName)
	{
		synchronized(m_Properties)
		{
			String retValue = m_Properties.get(propertyName);

			if(null == retValue)
				retValue = ""; // Never return null

			return retValue;
		}
	}

	protected void sysSetProperty(String propertyName, String value)
	{
		synchronized(m_Properties)
		{
			m_Properties.put(propertyName, value);
		}
	}

	protected Element sysExportProperties(Document ownerDoc)
	{
		Element retValue = ownerDoc.createElement("SystemProperties");
		synchronized(m_Properties)
		{
			Iterator<Entry<String,String>> iter = m_Properties.entrySet().iterator();
			while(iter.hasNext())
			{
				Entry<String,String> property = iter.next();
				Element propElement = ownerDoc.createElement("Property");
				propElement.setAttribute("name", property.getKey());
				propElement.setAttribute("value", property.getValue());
				retValue.appendChild(propElement);
			}
		}
		return retValue;
	}

	protected void sysImportProperties(Document xmlDocument)
	{
		if(null == xmlDocument)
			return;
		
		NodeList propList = xmlDocument.getElementsByTagName("SystemProperties");
		int len = propList.getLength();
		for(int i = 0; i < len; ++i)
		{
			Node node = propList.item(i);
			if(node instanceof Element)
			{
				Element propElement = (Element)node;
				NodeList children = propElement.getChildNodes();
				int numChildren = children.getLength();
				for(int j = 0; j < numChildren; ++j)
				{
					Node child = children.item(j);
					if(child instanceof Element)
					{
						Element childElement = (Element)child;
						String elName = childElement.getAttribute("name");
						String elValue = childElement.getAttribute("value");
						if(elName.equals(DjvSystemProperty.MIPROPERTY_LOG_LEVEL))
						{
							try
							{
								setLogLevel(Integer.parseInt(elValue));
							} catch (NumberFormatException ex){}
						}
						else if(elName.equals(DjvSystemProperty.MIPROPERTY_DIAGNOSTIC_ENABLED))
						{
							if(Boolean.parseBoolean(elValue))
							{
								enableDiagnostic();
							}
							else
							{
								disableDiagnostic();
							}
						}
						else
						{
							sysSetProperty(elName, elValue);
						}
					}
				}
			}
		}
	}

	protected Set<Map.Entry<String, String>> sysGetProperties()
	{
		synchronized(m_Properties)
		{
			return m_Properties.entrySet();
		}
	}

	private static final AbstractMap<String, String> m_VersionMap = new HashMap<String, String>();
	private static final AbstractMap<String,String> m_Properties = new HashMap<String,String>();
}
