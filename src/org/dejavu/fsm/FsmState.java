/* Generated by Together */
package org.dejavu.fsm;

/**
 * Represents all FSM states, programmable with state names, ids, entry
 * functions, and exit functions.
 */
public class FsmState {

	/**
	 * Creates a new state for this process. Note that the state ID is
	 * automatically generated via class utility FsmUtilities.
	 *
	 * @param name - Name of the state
	 * @param entryFunction Entry function (null if none is required)
	 * @param exitFunction Exit function (null if none is required)
	 */
	public FsmState(String name, FsmAction entryFunction, FsmAction exitFunction) {
		this.name = name;
		entryAction = entryFunction;
		exitAction = exitFunction;
		id = FsmUtilities.registerState(name);
	}

	/**
	 * Executes the entry function, if exists.
	 *
	 * @param event The event to be passed into the state entry function.
	 * @throws java.lang.InterruptedException User Interruptionm
	 */
	public void executeEntry(FsmEvent event) throws InterruptedException {
		if (null != entryAction) {
			entryAction.handleEvent(event);
		}
	}

	/**
	 * Executes the exit function, if exists.
	 *
	 * @param event The event to be passed to the state exit function.
	 * @throws java.lang.InterruptedException User interruption
	 */
	public void executeExit(FsmEvent event) throws InterruptedException {
		if (null != exitAction) {
			exitAction.handleEvent(event);
		}
	}

	@Override
	public String toString() {
		return "FsmState{" + "id=" + id + ", name=" + name + '}';
	}

	
	public final int id;
	public final String name;

	/**
	 * @supplierCardinality 1
	 */
	private final FsmAction exitAction;

	/**
	 * @supplierCardinality 1
	 */
	private final FsmAction entryAction;
}
