/* Generated by Together */
package org.dejavu.fsm;

import java.util.ArrayList;
import java.util.Collection;
import org.dejavu.util.DjvBackgroundTask;
import org.dejavu.util.DjvExceptionUtil;
import org.dejavu.util.DjvLogMsg.Category;
import org.dejavu.util.DjvSystem;
import java.util.TreeMap;
import java.util.Iterator;
import java.util.Map;

/**
 * Implements a timer manager which allows clients to register their FSM events
 * to be fired once, after some period of time.
 *
 * @author haiv
 */
public class FsmTimer {

	/**
	 * The timer event record
	 */
	private static class EventTimer {

		private EventTimer(FsmEvent evt, int timeoutMs) {
			event = evt;
			periodMs = timeoutMs;
		}

		public final FsmEvent event;
		private int periodMs;
	}

	/**
	 * Creates an FSM timer with a default resolution of 1 second
	 */
	public FsmTimer() {
		timeResolutionMs = 1000;
	}

	/**
	 * Creates an FSM timer.
	 *
	 * @param timeResolution The resolution of the timer, in milliseconds.
	 */
	public FsmTimer(long timeResolution) {
		timeResolutionMs = timeResolution;
	}

	/**
	 * Starts the FSM timer. May be invoked multiple times.
	 *
	 * @return This object.
	 */
	public FsmTimer start() {
		synchronized (this) {
			if (workerTask != null) {
				// Already started
				return this;
			}
			workerTask = new WorkerTask().start();
		}
		return this;
	}

	/**
	 * Stops the FSM timer. The timer may be restarted subsequently.
	 */
	public void stop() {
		synchronized (this) {
			if (workerTask == null) {
				// Already stopped
				return;
			}
			workerTask.stop();
		}
	}

	/**
	 * Adds an event to be fired later.
	 *
	 * @param evt The FSM event to be fired
	 * @param timeout The timeout, in milliseconds, to wait before firing the
	 * specified event
	 * @return The integer ID of the event with which the client may cancel the
	 * event prior to it being fired.
	 * @throws FsmException
	 */
	public int addEvent(FsmEvent evt, int timeout) throws FsmException {
		synchronized (this) {
			if (workerTask != null) {
				int key = timerKeyCounter++;
				timerMap.put(key, new EventTimer(evt, timeout));
				return key;
			}
			throw new FsmException("Timer Shutdown");
		}
	}

	/**
	 * Removes a previously registered event, in effect cancelling it.
	 *
	 * @param timerKey The integer ID of the target event, as returned from
	 * addEvent().
	 */
	public synchronized void removeEvent(Integer timerKey) {
		timerMap.remove(timerKey);
	}

	private final Map<Integer, EventTimer> timerMap = new TreeMap<>();
	private int timerKeyCounter = 0;
	private DjvBackgroundTask workerTask;

	/**
	 * Time resolution in milliseconds
	 */
	private final long timeResolutionMs;

	/**
	 * Background task for handling event firing logic.
	 */
	private class WorkerTask extends DjvBackgroundTask {

		private WorkerTask() {
			super();
		}

		@Override
		@SuppressWarnings("SleepWhileInLoop")
		public void run() {
			try {
				while (getRunFlag()) {
					try {
						Thread.sleep(timeResolutionMs);
						Collection<EventTimer> firingTimers;
						synchronized (FsmTimer.this) {
							firingTimers = new ArrayList<>(timerMap.values());
						}
						Iterator<EventTimer> iter = firingTimers.iterator();
						while (iter.hasNext() && getRunFlag()) {
							EventTimer timer = iter.next();
							if (timer.periodMs > 0) {
								timer.periodMs -= timeResolutionMs;
								if (timer.periodMs > 0) {
									// Still has time, no fire.
									iter.remove();
								}
							}
						}
						for(EventTimer timer : firingTimers) {
							timer.event.getContext().getFsmDomain().dispatchEvent(timer.event, true);
						}
					} catch (RuntimeException e) {
						DjvSystem.logError(Category.DESIGN, DjvExceptionUtil.simpleTrace(e));
					}
				}
			} catch (InterruptedException e) {
			} finally {
				synchronized (FsmTimer.this) {
					timerMap.clear();
					if (workerTask == this) {
						workerTask = null;
					}
				}
			}
		}
	}
}
