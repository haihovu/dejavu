/* Generated by Together */
package org.dejavu.activefx;

import java.nio.ByteBuffer;
import java.nio.channels.SelectableChannel;
import org.dejavu.util.DjvLogMsg;
import org.dejavu.util.DjvSystem;

/**
 * The interface for handling Active FX events. Typically used by Active FX
 * clients to get request notifications.
 */
public interface AfxEventHandler {

	/**
	 * The Active FX connection had been open, and is ready for read/write
	 * request.
	 */
	default void openCompleted() {
		DjvSystem.logInfo(DjvLogMsg.Category.DESIGN, "Open completed " + this);
	}

	/**
	 * The Active FX connection is now closed.
	 */
	default void closed() {
		DjvSystem.logInfo(DjvLogMsg.Category.DESIGN, "Closed " + this);
	}

	/**
	 * The previous read request is now completed, the supplied buffer is filled
	 * with data read in from the network.
	 *
	 * @param returnedBuffer The buffer given to the read command, which now
	 * contains the input data.
	 */
	default void readCompleted(ByteBuffer returnedBuffer) {
		DjvSystem.logInfo(DjvLogMsg.Category.DESIGN, "Read completed " + this);
	}

	/**
	 * The previous write request is completed.
	 */
	default void writeCompleted() {
		DjvSystem.logInfo(DjvLogMsg.Category.DESIGN, "Write completed " + this);
	}

	/**
	 * A new Active FX connection had been accepted and created.
	 *
	 * @param newConnection The new Active FX connection.
	 * @todo See if we could trim down to only one acceptCompleted.
	 */
	default void acceptCompleted(AfxConnection newConnection) {
		DjvSystem.logInfo(DjvLogMsg.Category.DESIGN, this + " accept completed " + newConnection);
	}

	/**
	 * A new channel had been accepted
	 *
	 * @param newChannel The new SelectableChannel (i.e. SocketChannel)
	 * @todo See if we could trim down to only one acceptCompleted.
	 */
	default void acceptCompleted(SelectableChannel newChannel) {
		DjvSystem.logInfo(DjvLogMsg.Category.DESIGN, this + " accept completed " + newChannel);
	}

	/**
	 * The previous open request failed.
	 *
	 * @param theCause Arbitrary cause of the failure
	 */
	default void openFailed(String theCause) {
		DjvSystem.logWarning(DjvLogMsg.Category.DESIGN, this + " open failed " + theCause);
	}

	/**
	 * The previous read request had failed.
	 */
	default void readFailed() {
		DjvSystem.logWarning(DjvLogMsg.Category.DESIGN, "Read failed " + this);
	}

	/**
	 * The previous write request had failed.
	 */
	default void writeFailed() {
		DjvSystem.logWarning(DjvLogMsg.Category.DESIGN, "Write failed " + this);
	}
}
